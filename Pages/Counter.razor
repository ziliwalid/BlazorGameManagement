@page "/Counter"
@using System.Net.Http.Json
@using frontendApi.Models
@inject HttpClient httpClient
@inject IDialogService DialogService

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddNewGame">Add Game</MudButton>
<MudTable Items="@Games" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Genre</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Genre">@context.Genre</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@(() => OpenDialog(@context))">Edit</MudButton>
                <MudButton Icon="Icons.Material.Outlined.Delete" Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" @onclick="@(() => DeleteGame(@context))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>

    <MudSwitch @bind-Checked="_loading">Show Loading</MudSwitch>

    @code {
    private bool _loading;
    private List<Game> Games = new List<Game>();

    protected override async Task OnInitializedAsync()
    {
        await LoadGames();
    }

    private async Task LoadGames()
    {
        try
        {
            Games = await httpClient.GetFromJsonAsync<List<Game>>("api/App/games");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while loading games: {ex.Message}");
        }
    }

    private async Task OpenDialog(Game game)
    {
        var parameters = new DialogParameters
            {
                ["GameToUpdate"] = game,
                ["IsEditMode"] = true // Add this parameter to indicate edit mode
            };
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UpdateGameDialog>("Dialog Title", parameters, options);

        // wait for the dialog to close
        var result = await dialog.Result;

        // check if the dialog was cancelled
        if (result.Cancelled == false)
        {
            // reload games after a successful update
            await LoadGames();
        }
    }

    private async Task AddNewGame()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = DialogService.Show<UpdateGameDialog>("Add New Game", options);

        // wait for the dialog to close
        var result = await dialog.Result;

        // check if the dialog was cancelled
        if (result.Cancelled == false)
        {
            // reload games after a successful addition
            await LoadGames();
        }
    }

    private async Task DeleteGame(Game game)
    {
        try
        {
            // make an API call to delete the game
            await httpClient.DeleteAsync($"api/App/games/{game.Id}");

            // remove the deleted game from the list
            Games.Remove(game);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while deleting the game: {ex.Message}");
        }
    }
}
